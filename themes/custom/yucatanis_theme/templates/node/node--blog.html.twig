{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @ingroup themeable
 */
#}
<article{{ attributes }}>

  {{ title_prefix }}
  {% if label and not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer>
      {# {{ author_picture }}
      <div{{ author_attributes }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div> #}
    </footer>
  {% endif %}

  <div{{ content_attributes }}>
<section class="ptb-100-200">
  <div class="container">
    <div class="row blog-detail-wrap">
      <div class="col-lg-2">
        <div class="blog-date-block">
          <h1>{{ day }}</h1>
          <span>{{ monyear }}</span>
          {% for entry in node.field_read_time.value %}
           <p>{{(entry['minutes'])}}min read </p>
          {% endfor %}
        </div>
           
      </div>
      <div class="col-lg-10 d-grid gap40 blog-title">
        <h2><span class="orange-color">Know Before You Go </span>{{ node.label }}</h2>
            {{ node.field_blog_short_description.value|raw }}
      </div>
      <div class="col-12 blog-details">
        <div class="images-banner-with-text">
          <div class="image-banner-subtitle">
          
            {% for image in node.field_blog_image  %}
              {% if image.entity.field_media_image|length %}
                <img src="{{ file_url(image.entity.field_media_image.entity.uri.value) }}" class="img-fluid w-100" alt="{{ image.entity.field_media_image.alt }}">
                {# <img src="{{ file_url(image.entity.field_media_image.entity.uri.value) }}" class="img-fluid w-100"> #}
              {% endif %}
            {% endfor %}
              
            <h6> {{ node.field_blog_image_text.value|raw }}</h6>
            <div class="share-media-icons justify-content-center">
              <div class="share-icon-wrap">
               
                
              {% if node.field_blog_social_links.entity %}
          
           {% set referencedParagraphs = node.field_blog_social_links %}

           
            {% for paragraph in referencedParagraphs %}
              {# Check if the paragraph entity has the fields #}
              {% if paragraph.entity %}
                {# Get the values of the fields from the paragraph entity #}
                {% set linkclass = paragraph.entity.field_link_class.value %}
                {% set links = paragraph.entity.field_links.value %}
                
                 {% set linktitle = paragraph.entity %}

                {% set paragraphEntity = paragraph.entity %}

                {% if paragraphEntity.field_social_icon.entity %}

                {% set svgImageEntity = paragraphEntity.field_social_icon.entity %}
                
                  <a href="{{ links }}" class="{{ linkclass}}">
                    <img src="{{ file_url(svgImageEntity.fileuri)}}" width="20" height="20" >
                    {# {{(node.field_blog_social_links.entity.field_links.value['title']) }} #}
                    {{links.0.title}}        
                  </a>

                      {% endif %}
                
                
              {% endif %}
            {% endfor %}
         
         {% endif %}
              
              
              </div>

            </div>
          </div>

          {% if node.field_blog_highlighted_text.value is not empty %}
          <div class="content-with-left-border ">
            {{ node.field_blog_highlighted_text.value|raw }}
          </div>
           {% endif %}
          {{ node.field_blog_description.value|raw }}
        </div>
        {# {% for text in paragraph.field_blog_text_with_description.entity	 %} #}
        {% if node.field_blog_text_with_description.entity %}
          
           {% set referencedParagraphs = node.field_blog_text_with_description %}

           
            {% for paragraph in referencedParagraphs %}
              {# Check if the paragraph entity has the fields #}
              {% if paragraph.entity %}
                {# Get the values of the fields from the paragraph entity #}
                {% set title = paragraph.entity.field_blog_title.value %}
                {% set description = paragraph.entity.field_title_with_detail.value %}
                
                {# Render the fields of the referenced paragraph entity #}
                <div class="title-with-detail">
                  <h6 class="font20"> {{ title|raw}}</h6>
                  {{ description|raw }}
                </div>
                
              {% endif %}
            {% endfor %}
         
         {% endif %}
         {% if node.field_blog_highlighted_text.value is not empty %}
          <div class="content-with-left-border ">
            {{ node.field_blog_bottom_highlight_text.value|raw }} 
          </div>
         {% endif %}
      </div>
    </div>
  </div>
</section>

</article>